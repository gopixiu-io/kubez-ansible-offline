---
- name: Install nfs utils packages
  package:
    name: "{{ item.name }}"
    state: present
    use: "{{ item.use }}"
  loop:
    - {name: "rpcbind", group: "storage", os: "Ubuntu", use: "apt"}
    - {name: "nfs-kernel-server", group: "kubernetes", os: "Ubuntu", use: "apt"}
    - {name: "rpcbind", group: "storage", os: "Debian", use: "apt"}
    - {name: "nfs-kernel-server", group: "kubernetes", os: "Debian", use: "apt"}
    - {name: "rpcbind", group: "storage", os: "CentOS", use: "yum"}
    - {name: "nfs-utils", group: "kubernetes", os: "CentOS", use: "yum"}
    - {name: "rpcbind", group: "storage", os: "Rocky", use: "dnf"}
    - {name: "nfs-utils", group: "kubernetes", os: "Rocky", use: "dnf"}
  when:
    - enable_nfs | bool
    - inventory_hostname in groups[item.group]
    - ansible_distribution == item.os

- name: Install haproxy and keepalived
  package:
    name:
      - haproxy
      - keepalived
    state: present
  when:
    - enable_haproxy | bool
    - inventory_hostname in groups['haproxy']

- name: Install kubernetes packages
  block:
    - name: Install kubernetes and its indepent packages
      package:
        name: "{{ item.name }}"
        state: present
        use: "{{ item.use }}"
      loop:
        - {name: "kubelet-{{ kube_release }}", os: "CentOS", use: "yum"}
        - {name: "kubectl-{{ kube_release }}", os: "CentOS", use: "yum"}
        - {name: "kubeadm-{{ kube_release }}", os: "CentOS", use: "yum"}
      when:
        - ansible_distribution == item.os

    # Somethings service module invoke enable command failed,
    # but I do not know the reason, use shell module to avoid.
    # The failed message is like:
    # "Could not find the requested service kubelet: host"
    - name: Enable kubelet service
      shell: systemctl enable kubelet
      changed_when: false
  when:
    - inventory_hostname in groups['kubernetes']

- name: Install runtimes for kubernetes
  package:
    name: "{{ item.runtime }}"
    state: present
    use: "{{ item.use }}"
  when:
    - inventory_hostname in groups[item.nodegroups] or
      inventory_hostname in groups[item.mastergroups]
    - ansible_distribution == item.os
  loop:
    - {runtime: "docker-ce", nodegroups: "docker-node", mastergroups: "docker-master", os: "CentOS", use: "yum"}
    - {runtime: "containerd.io", nodegroups: "containerd-node", mastergroups: "containerd-master", os: "CentOS", use: "yum"}

- name: Ensure /etc/docker directories exists
  file:
    path: /etc/docker
    state: directory
  when:
    - inventory_hostname in groups['docker-master'] or
      inventory_hostname in groups['docker-node']

- name: Copy docker daemon jsons
  template:
    src: kube-daemon.json.j2
    dest: /etc/docker/daemon.json
  when:
    - inventory_hostname in groups['docker-master'] or
      inventory_hostname in groups['docker-node']
  notify:
    - Restart docker service

- name: Ensure /etc/containerd directories exists
  file:
    path: /etc/containerd
    state: directory
  when:
    - inventory_hostname in groups['containerd-master'] or
      inventory_hostname in groups['containerd-node']

- name: Get the containerd sandbox image
  kube_toolbox:
    module_name: kubeadm
    module_args: "config images list"
    module_extra_vars:
      image-repository: "{{ image_repository }}"
      kubernetes-version: "{{ kubernetes_version }}"
  register: sandbox_result
  delegate_to: "{{ groups['containerd-master'][0] }}"
  run_once: True
  when: inventory_hostname in groups['containerd-master']

- name: Copy containerd config.toml
  vars:
    sandbox_image: "{{ sandbox_result['result']['sandbox_image'] }}"
  template:
    src: config.toml.j2
    dest: /etc/containerd/config.toml
  when:
    - inventory_hostname in groups['containerd-master'] or
      inventory_hostname in groups['containerd-node']
  notify:
    - Restart containerd service

- name: Check docker service status
  service_check:
    service_name: docker
    service_type: systemd
  when:
    - inventory_hostname in groups['docker-master'] or
      inventory_hostname in groups['docker-node']
  notify:
    - Restart docker service

- name: Check containerd service status
  service_check:
    service_name: containerd
    service_type: systemd
  when:
    - inventory_hostname in groups['containerd-master'] or
      inventory_hostname in groups['containerd-node']
  notify:
    - Restart containerd service

- name: Flush handlers
  meta: flush_handlers
